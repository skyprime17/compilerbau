package test;


pub fn swap(inout arr: [Int], i: Int, j: Int) {
    let temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

pub fn reverse(inout arr: [Int]) -> [Int] {
    let n:Int = arr.len();
    let i:Int = 0;
    let j:Int = n - 1;
    while i < j {
        swap(arr, i, j);
        i = i + 1;
        j = j - 1;
    }
    return arr;
}

pub fn bubbleSort(inout arr: [Int]) -> [Int] {
    let n:Int = arr.len();
    let i:Int = 0;
    while i < n {
        let j:Int = 0;
        while j < n - i - 1 {
            if arr[j] > arr[j + 1] {
                swap(arr, j, j + 1);
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return arr;
}

pub fn quickSort(inout arr: [Int], low: Int, high: Int) -> [Int] {
    if low < high {
        let pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
    return arr;
}

fn partition(inout arr: [Int], low: Int, high: Int) -> Int {
    let pivot = arr[high];
    let i = low - 1;
    let j = low;
    while j < high {
        if arr[j] < pivot {
            i = i + 1;
            swap(arr, i, j);
        }
        j = j + 1;
    }
    swap(arr, i + 1, high);
    return i + 1;
}

struct LinkedList {
    value: Int,
    next: LinkedList?
}

pub fn createNode(value: Int) -> LinkedList {
    let newNode = LinkedList {
        value: value,
        next: null
    };
    return newNode;
}

pub fn addNodeToTail(head: LinkedList, value: Int) -> LinkedList {
    let newNode = createNode(value);
    let temp = head;
    while temp.next != null {
        temp = temp.next;
    }
    temp.next = newNode;
    return head;
}

pub fn t() -> [Int] {
    return [1, 2, 3,4,5,6,7,8,9,10];
}

pub fn s() -> Int {
    return t()[5];
}

pub fn s3() -> Int {
    let s = 3;
    return t()[s];
}

pub fn s4() -> Int {
    let s = t()[4];
    return s;
}

pub fn s5() -> Int {
    let s = 5;
    return t()[s];
}

pub fn s6() -> Int {
    let s = t()[6];
    return s;
}