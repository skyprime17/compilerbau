package boolTest;


pub fn t() -> Boolean {
    return true;
}

pub fn f() -> Boolean {
    return false;
}

pub fn and(a: Boolean, b: Boolean) -> Boolean {
    return a && b;
}

pub fn or(a: Boolean, b: Boolean) -> Boolean {
    return a || b;
}

pub fn eq(a: Boolean, b: Boolean) -> Boolean {
    return a == b;
}

pub fn neq(a: Boolean, b: Boolean) -> Boolean {
    return a != b;
}

pub fn not(bool: Boolean) -> Boolean {
    return !bool;
}

pub fn not2(bool: Boolean) -> Boolean {
    let s = !bool;
    return s;
}


pub fn ifCallTrue() -> Boolean {
    if t() {
        return true;
    }
    return false;
}

pub fn ifCallFalse() -> Boolean {
    if f() {
        return true;
    }
    return false;
}

pub fn compoundAnd(x: Boolean) -> Boolean {
    let s = true;
    s &= x;
    return s;
}

pub fn compoundOr(x: Boolean) -> Boolean {
    let s = false;
    s |= x;
    return s;
}


