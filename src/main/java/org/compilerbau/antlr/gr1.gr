package test;
/*
Example 1 - create an array from a range
*/
fn create_array_from_range(start:int, end:int) -> [int] {
    let xs = [];
    let i = start;
    while i < end {
        xs = xs + [i];
        i = i + 1;
    }
    return xs;
}

/*
Example 2 - mutable arguments
*/
fn add_one_to_slice_arr(xs: [int]) -> void {
    xs = xs + [1];
}
fn main() -> void {
    let xs = [];
    assertThrows(mutable_arguments(xs), "cannot mutate immutable argument");
}

/*
Example 3 - if statements
*/
pub fn main() -> void {
    let x = 1;
    if x == 1 {
        assert(x == 1);
    } else if x == 2 {
        assert(x == 2);
    } else {
        assert(x == 3);
    }
}

/*
Example 4 - while loops
*/
fn main() -> void {
    let x = 0;
    while x < 10 {
        x = x + 1;
    }
    assert(x == 10);
}

/*
Example 5 - variables
*/
fn main() -> void {
    let x = 1;
    let xy: int = 1;
    let y: int = 6;
}

/*
Example 6
/*
struct Point {
    pub x: int,
    pub y: int,
    draw: bool,
}
fn main() -> void {
    let p = Point{x: 1, y: 2};
    assert(p.x == 1);
    assert(p.y == 2);
    let p_mut = p;
}

/*
Example 7 - example program
*/
fn main() -> void {
    let xs = [1, 2, 3, 4, 5];
    let len = length(xs);
}

/*
Example 8 - primitive types
*/
fn main() -> void {
    let x: int = 1;
    let y: float = 1;
    let z: bool = true;
    let a: char = "a";
    let b: string = "hello";
    let static_arr: [int; 5] = [1, 2, 3, 4, 5];
    let dynamic_arr = [1, 2, 3, 4, 5];
}

/*
Example 9 - arrays and slices
*/
fn method_with_array_param(xs: [int; 3]) -> void {
    println(xs)
}
fn method_with_arraylist(xs: [int]) -> void {
    println(xs)
}